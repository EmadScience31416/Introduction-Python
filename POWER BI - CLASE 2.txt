POWER BI - CLASE 2

----------------------------
Crear modelo de negocios
---------------------------

En Power BI, crear un modelo de negocios se refiere a la construcción de un modelo de datos que sirva de base para los reportes y análisis. Implica importar datos desde diversas fuentes, realizar transformaciones y establecer relaciones entre las tablas para facilitar la creación de visualizaciones y análisis de datos. Un modelo de datos bien diseñado permite realizar análisis más efectivos y obtener insights valiosos.



-------------------------
EJERCICIO
-------------------------

Facturas Ventas

let
    Origen = Excel.Workbook(File.Contents("C:\Users\Windows 11\Desktop\Documentos\Instructor\Capítulo 2\08 Recursos\Ventas-Totales-Detalladas.xlsx"), null, true),
    #"Facturas ventas_Sheet" = Origen{[Item="Facturas ventas",Kind="Sheet"]}[Data],
    #"Encabezados promovidos" = Table.PromoteHeaders(#"Facturas ventas_Sheet", [PromoteAllScalars=true]),
    #"Tipo cambiado" = Table.TransformColumnTypes(#"Encabezados promovidos",{{"CODCLI", Int64.Type}, {"CODART", Int64.Type}, {"Repesentante", type text}, {"Cliente", type text}, {"Pais", type text}, {"Comunidad autónoma", type text}, {"Provincia", type text}, {"Zona", type text}, {"Artículo", type text}, {"Familia", type text}, {"Tipo contable", Int64.Type}, {"Serie", Int64.Type}, {"Nº factura", Int64.Type}, {"Fecha", type datetime}, {"Ejercicio", Int64.Type}, {"Trimestre", Int64.Type}, {"Mes", Int64.Type}, {"Nombre mes", type date}, {"Descripción", type text}, {"Característica 1 cliente", type text}, {"Característica 2 cliente", type text}, {"Característica 3 cliente", type text}, {"Característica 4 cliente", type text}, {"Característica 5 cliente", type text}, {"Característica 6 cliente", type text}, {"Característica 7 cliente", type text}, {"Característica 8 cliente", type text}, {"Característica 9 cliente", type text}, {"Característica 10 cliente", type text}, {"Característica 1 organización", type text}, {"Característica 2 organización", type text}, {"Característica 3 organización", type text}, {"Característica 4 organización", type text}, {"Característica 5 organización", type text}, {"Característica 6 organización", type text}, {"Característica 7 organización", type text}, {"Característica 8 organización", type text}, {"Característica 9 organización", type text}, {"Característica 10 organización", type text}, {"Característica 1 artículo", type text}, {"Característica 2 artículo", type text}, {"Característica 3 artículo", type text}, {"Característica 4 artículo", type text}, {"Característica 5 artículo", type text}, {"Característica 6 artículo", type text}, {"Característica 7 artículo", type text}, {"Característica 8 artículo", type text}, {"Característica 9 artículo", type text}, {"Característica 10 artículo", type text}, {"Campo parametrizable 1", type any}, {"Campo parametrizable 2", type any}, {"Campo parametrizable 3", type any}, {"Campo parametrizable 4", type any}, {"Campo parametrizable 5", type any}, {"Campo parametrizable 6", type any}, {"Campo parametrizable 7", type any}, {"Campo parametrizable 8", type any}, {"Campo parametrizable 9", type any}, {"Neto", type number}, {"Bruto", type number}, {"Unidades", Int64.Type}}),
    #"Otras columnas quitadas" = Table.SelectColumns(#"Tipo cambiado",{"CODCLI", "CODART", "Repesentante", "Cliente", "Pais", "Comunidad autónoma", "Provincia", "Zona", "Artículo", "Nº factura", "Fecha", "Ejercicio", "Trimestre", "Mes", "Descripción", "Característica 1 cliente", "Característica 1 artículo", "Neto", "Bruto", "Unidades"})
in
    #"Otras columnas quitadas"



-----------------------------------------------------


- Dim Artículo
	CODART | Artículo | Categoría Artículo

let
    Origen = #"Facturas ventas",
    #"Otras columnas quitadas" = Table.SelectColumns(Origen,{"CODART", "Artículo", "Descripción", "Característica 1 artículo"}),
    #"Duplicados quitados" = Table.Distinct(#"Otras columnas quitadas", {"CODART"}),
    #"Filas ordenadas" = Table.Sort(#"Duplicados quitados",{{"CODART", Order.Ascending}}),
    #"Columnas quitadas" = Table.RemoveColumns(#"Filas ordenadas",{"Descripción"}),
    #"Columnas con nombre cambiado" = Table.RenameColumns(#"Columnas quitadas",{{"Característica 1 artículo", "Categoria Articulo"}})
in
    #"Columnas con nombre cambiado"

-----------------------------------------------------
- Dim Cliente
	CODCLI | Cliente | Categoría Cliente

let
    Origen = #"Facturas ventas",
    #"Otras columnas quitadas" = Table.SelectColumns(Origen,{"CODCLI", "Repesentante", "Cliente", "Característica 1 cliente"}),
    #"Duplicados quitados" = Table.Distinct(#"Otras columnas quitadas", {"CODCLI"}),
    #"Filas ordenadas" = Table.Sort(#"Duplicados quitados",{{"CODCLI", Order.Ascending}}),
    #"Columnas reordenadas" = Table.ReorderColumns(#"Filas ordenadas",{"CODCLI", "Cliente", "Característica 1 cliente", "Repesentante"}),
    #"Columnas con nombre cambiado" = Table.RenameColumns(#"Columnas reordenadas",{{"Característica 1 cliente", "Categoria Cliente"}})
in
    #"Columnas con nombre cambiado"


-----------------------------------------------------
- Dim Fecha
	CODFECHA | Fecha | Nro. Trimestre |Nro. Mes | Mes


let
    Origen = #"Facturas ventas",
    #"Otras columnas quitadas" = Table.SelectColumns(Origen,{"Fecha", "Ejercicio", "Trimestre", "Mes"}),
    #"Duplicados quitados" = Table.Distinct(#"Otras columnas quitadas", {"Fecha"}),
    #"Índice agregado" = Table.AddIndexColumn(#"Duplicados quitados", "Índice", 1, 1, Int64.Type),
    #"Columnas reordenadas" = Table.ReorderColumns(#"Índice agregado",{"Índice", "Fecha", "Ejercicio", "Trimestre", "Mes"}),
    #"Columnas con nombre cambiado" = Table.RenameColumns(#"Columnas reordenadas",{{"Índice", "CODFECHA"}}),
    #"Tipo cambiado" = Table.TransformColumnTypes(#"Columnas con nombre cambiado",{{"Fecha", type date}}),
    #"Columnas con nombre cambiado1" = Table.RenameColumns(#"Tipo cambiado",{{"Ejercicio", "Año"}, {"Trimestre", "Nro. Trimestre"}, {"Mes", "Nro. Mes"}}),
    #"Nombre del mes insertado" = Table.AddColumn(#"Columnas con nombre cambiado1", "Nombre del mes", each Date.MonthName([Fecha]), type text),
    #"Columnas con nombre cambiado2" = Table.RenameColumns(#"Nombre del mes insertado",{{"Nombre del mes", "Mes"}})
in
    #"Columnas con nombre cambiado2"

-----------------------------------------------------
- Dim Territorio Ventas
	CODTVENTA | Provinica | Comunidad Autónoma | Zona | País

let
    Origen = #"Facturas ventas",
    #"Otras columnas quitadas" = Table.SelectColumns(Origen,{"Pais", "Comunidad autónoma", "Provincia", "Zona"}),
    #"Duplicados quitados" = Table.Distinct(#"Otras columnas quitadas", {"Provincia", "Zona"}),
    #"Índice agregado" = Table.AddIndexColumn(#"Duplicados quitados", "Índice", 1, 1, Int64.Type),
    #"Columnas reordenadas" = Table.ReorderColumns(#"Índice agregado",{"Índice", "Pais", "Comunidad autónoma", "Provincia", "Zona"}),
    #"Columnas con nombre cambiado" = Table.RenameColumns(#"Columnas reordenadas",{{"Índice", "CODTVENTA"}}),
    #"Columnas reordenadas1" = Table.ReorderColumns(#"Columnas con nombre cambiado",{"CODTVENTA", "Provincia", "Comunidad autónoma", "Zona", "Pais"})
in
    #"Columnas reordenadas1"


-----------------------------------------------------
- Fact Table Ventas
	CODCLI | CODART | CODTVENTA | CODFECHA | N° facutra | Neto | Bruto | Utilidades | Importancia

PROVINCIA Y ZONA para cruzarlo
Fecha para cruzar Dim Fecha
	
let
    Origen = #"Facturas ventas",
    #"Otras columnas quitadas" = Table.SelectColumns(Origen,{"CODCLI", "CODART", "Provincia", "Zona", "Nº factura", "Fecha", "Neto", "Bruto", "Unidades"}),
    #"Tipo cambiado" = Table.TransformColumnTypes(#"Otras columnas quitadas",{{"Fecha", type date}}),
    #"Consultas combinadas" = Table.NestedJoin(#"Tipo cambiado", {"Provincia", "Zona"}, #"Dim Territorio Ventas", {"Provincia", "Zona"}, "Dim Territorio Ventas", JoinKind.Inner),
    #"Se expandió Dim Territorio Ventas" = Table.ExpandTableColumn(#"Consultas combinadas", "Dim Territorio Ventas", {"CODTVENTA"}, {"CODTVENTA"}),
    #"Columnas reordenadas" = Table.ReorderColumns(#"Se expandió Dim Territorio Ventas",{"CODCLI", "CODART", "CODTVENTA", "Provincia", "Zona", "Nº factura", "Fecha", "Neto", "Bruto", "Unidades"}),
    #"Columnas quitadas" = Table.RemoveColumns(#"Columnas reordenadas",{"Provincia", "Zona"}),
    #"Consultas combinadas1" = Table.NestedJoin(#"Columnas quitadas", {"Fecha"}, #"Dim Fecha", {"Fecha"}, "Dim Fecha", JoinKind.Inner),
    #"Se expandió Dim Fecha" = Table.ExpandTableColumn(#"Consultas combinadas1", "Dim Fecha", {"CODFECHA"}, {"CODFECHA"}),
    #"Columnas reordenadas1" = Table.ReorderColumns(#"Se expandió Dim Fecha",{"CODCLI", "CODART", "CODTVENTA", "CODFECHA", "Nº factura", "Fecha", "Neto", "Bruto", "Unidades"}),
    #"Columnas quitadas1" = Table.RemoveColumns(#"Columnas reordenadas1",{"Fecha"}),
    #"Columna condicional agregada" = Table.AddColumn(#"Columnas quitadas1", "Importancia", each if [Unidades] > 100 then "Alto" else if [Unidades] > 50 then "Medio" else "Bajo"),
    #"Tipo cambiado1" = Table.TransformColumnTypes(#"Columna condicional agregada",{{"Importancia", type text}})
in
    #"Tipo cambiado1"






------------------------
Lenguaje M
------------------------

El Lenguaje M es el lenguaje de programación que utiliza Power Query en Power BI para realizar transformaciones de datos. Es un lenguaje funcional que permite escribir scripts para manipular, limpiar y transformar los datos que se cargan en Power BI. Aunque Power BI genera código M automáticamente cuando se realizan transformaciones en Power Query, también es posible escribir y personalizar scripts M manualmente.


-------------------------------
Operadores de lenguaje M
-------------------------------
Los operadores en el Lenguaje M son símbolos o palabras clave que realizan operaciones sobre los datos, como aritméticas, lógicas o de comparación. Algunos operadores comunes incluyen:

Aritméticos: +, -, *, / (suma, resta, multiplicación, división).
Lógicos: and, or, not (y, o, no).
Comparación: =, <>, >, <, >=, <= (igual, diferente, mayor que, menor que, mayor o igual, menor o igual).


------------------------------
Declaraciones 
------------------------------
En Lenguaje M, declaraciones son líneas de código que definen variables, funciones o realizan operaciones específicas dentro de un script. Cada declaración es una instrucción que se ejecuta en secuencia dentro del flujo del script M. Ejemplo: definir una tabla, una columna calculada, o una transformación.

-----------------------------
Statements Try Otherwise
-----------------------------
Los statements Try Otherwise en Lenguaje M permiten manejar errores. El try intenta ejecutar una operación, y si falla, el otherwise proporciona un valor alternativo o una acción a realizar. Es útil para manejar errores en transformaciones de datos.

----------------------------
Funciones Lenguaje M
----------------------------
Las funciones en Lenguaje M son bloques de código que realizan una operación específica y pueden ser reutilizadas en diferentes partes del script. Existen funciones nativas (como Text.Start, Date.AddDays, etc.) y también se pueden crear funciones personalizadas. Las funciones pueden recibir parámetros y devolver resultados.

----------------------------
Parámetros
----------------------------
Los parámetros en Lenguaje M permiten crear variables dinámicas que pueden cambiar el comportamiento de una consulta o una transformación. Los parámetros se pueden usar para cambiar filtros, fuentes de datos, o cualquier aspecto del proceso de transformación sin necesidad de modificar el código principal.

----------------------------
Funciones personalizadas
----------------------------
Las funciones personalizadas son funciones que defines tú mismo en Lenguaje M para realizar tareas específicas que no están cubiertas por las funciones nativas. Estas funciones permiten reutilizar código y hacer que tus scripts sean más modulares y fáciles de mantener.



--------------------------------------------------------------------------------------------------

-------------------------------------------
1. CREAR MODELO DE NEGOCIOS
-------------------------------------------
Utilizar múltiples tablas en lugar de un solo tablón de datos (tabla plana) en Power BI tiene varias ventajas, especialmente cuando se trata de construir un modelo de negocios sólido y eficiente. Aquí te explico por qué:

Tamaño de los Datos: Cuando tienes un solo tablón de datos con todas las columnas y filas, el tamaño del archivo y el tiempo de procesamiento pueden aumentar considerablemente. Utilizar múltiples tablas relacionadas reduce la redundancia y, por lo tanto, mejora el rendimiento.

Cálculos Eficientes: Las consultas y cálculos (como medidas DAX) suelen ser más eficientes cuando los datos están normalizados y divididos en varias tablas relacionadas, ya que Power BI puede optimizar la ejecución de estos cálculos.

Facilidad de Actualización: Con múltiples tablas, puedes actualizar partes del modelo de datos sin necesidad de recargar todo el tablón de datos. Esto es particularmente útil cuando trabajas con grandes volúmenes de datos.

Relaciones Claras: Al crear un modelo con múltiples tablas, puedes definir claramente las relaciones entre las entidades (por ejemplo, productos, clientes, ventas). Esto refleja mejor la estructura de los datos y facilita la comprensión de cómo se relacionan las diferentes partes del negocio.

Modelo Conceptual: Un modelo de datos con múltiples tablas refleja mejor un modelo de negocio real, donde diferentes aspectos del negocio (ventas, productos, clientes) están interrelacionados pero son entidades separadas.

Eliminación de Duplicados: En un solo tablón de datos, es probable que haya redundancia, como tener múltiples filas con la misma información de cliente o producto. Al dividir los datos en tablas, puedes eliminar esta redundancia y almacenar la información de manera más eficiente.

Análisis Avanzado: Con un modelo de datos bien estructurado y normalizado, es más fácil realizar análisis complejos, como segmentaciones, análisis de tendencias o cálculos de KPIs específicos.

Cambio en la Perspectiva del Análisis: Con varias tablas, puedes cambiar fácilmente la perspectiva de tu análisis (por ejemplo, de analizar ventas por producto a analizar ventas por cliente) sin necesidad de reestructurar toda la tabla.

Interfaz más Sencilla: Un modelo con múltiples tablas puede hacer que la experiencia de construcción de reportes sea más intuitiva, ya que es más fácil encontrar y utilizar los campos relevantes sin navegar por un tablón de datos masivo.

En resumen, aunque un solo tablón de datos puede parecer más simple al principio, a medida que el modelo crece en complejidad y tamaño, utilizar un modelo con múltiples tablas es más eficiente, escalable, y mantiene la integridad y claridad de los datos. Además, al reflejar mejor la estructura real del negocio, facilita la creación de análisis más precisos y significativos.


--------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------
MODELO DIMENSIONAL
----------------------------

Un modelo dimensional es una técnica de modelado de datos que se utiliza principalmente en sistemas de almacenamiento de datos y en herramientas de Business Intelligence (BI) como Power BI para estructurar la información de manera que facilite el análisis y la generación de reportes. Este modelo organiza los datos en dos tipos principales de tablas: tablas de hechos y tablas de dimensiones.

1. Modelo Dimensional:
El modelo dimensional está diseñado para optimizar la consulta y el análisis de datos. En lugar de organizar los datos en tablas normalizadas (como en un modelo relacional clásico), el modelo dimensional se centra en la eficiencia y la facilidad de uso para la generación de reportes y análisis.
En este modelo, la tabla de hechos contiene los datos cuantitativos, mientras que las tablas de dimensiones contienen los atributos cualitativos que describen los hechos y permiten realizar agregaciones, filtros y análisis desde diferentes perspectivas.

2. Tablas de Hechos:
Una tabla de hechos (o tabla Fact) es el núcleo del modelo dimensional y contiene las medidas o hechos del negocio, que suelen ser valores numéricos como ventas, ingresos, cantidades, costos, etc.

Las filas de la tabla de hechos suelen ser transacciones o eventos individuales del negocio.
Además de las medidas, la tabla de hechos también contiene claves externas que se enlazan con las tablas de dimensiones, permitiendo el análisis desde diferentes perspectivas.
Ejemplo: En un modelo de ventas, la tabla de hechos podría incluir columnas como CantidadVendida, MontoTotal, CostoTotal, junto con claves externas a las dimensiones de tiempo, producto, y cliente.

3. Tablas de Dimensiones:
Una tabla de dimensiones contiene los atributos descriptivos que contextualizan los hechos en la tabla de hechos. Estos atributos permiten agrupar, filtrar y etiquetar los datos.
Las tablas de dimensiones suelen ser más pequeñas en términos de número de registros que las tablas de hechos, pero más ricas en detalles textuales o categóricos.

Ejemplo: En el mismo modelo de ventas, podrías tener:
Tabla de Dimensiones de Producto: con columnas como ProductoID, NombreProducto, Categoría, Marca.
Tabla de Dimensiones de Cliente: con ClienteID, NombreCliente, Región, Segmento.
Tabla de Dimensiones de Tiempo: con FechaID, Año, Mes, Trimestre, Día de la semana.

4. Relaciones Entre Tablas:
En un modelo dimensional, las tablas de hechos están conectadas a las tablas de dimensiones a través de relaciones basadas en las claves externas (foreign keys).
Estas relaciones permiten analizar los hechos desde diferentes ángulos o "dimensiones". Por ejemplo, puedes analizar las ventas (hechos) por región, por producto, o por periodo de tiempo (dimensiones).

5. Esquemas Comunes:
Esquema Estrella: Un modelo dimensional en el que todas las tablas de dimensiones están directamente conectadas a una tabla de hechos central. Este es el esquema más simple y común.
Esquema Copo de Nieve: Similar al esquema estrella, pero las tablas de dimensiones están normalizadas (divididas en sub-tablas), lo que crea una estructura más compleja con más relaciones.

6. Ventajas del Modelo Dimensional:
Facilidad de Entender y Usar: Los modelos dimensionales son intuitivos para los usuarios de negocio, facilitando la creación de reportes y análisis.
Rendimiento de Consultas: Al estar optimizado para la agregación y la consulta, el rendimiento de las consultas es generalmente mejor que en modelos relacionales tradicionales.
Flexibilidad: Permite realizar análisis multidimensionales, es decir, explorar los datos desde diferentes perspectivas (por ejemplo, ventas por producto, región y tiempo).

En resumen, un modelo dimensional organiza los datos de una manera que facilita el análisis de negocios, usando tablas de hechos para capturar medidas cuantitativas y tablas de dimensiones para describir y categorizar esos hechos desde múltiples ángulos. Este tipo de modelado es especialmente útil para crear reportes y dashboards en herramientas de BI como Power BI.


-------------------------------------------------------------------------------------------

---------------------------
LENGUAJE M
---------------------------
El lenguaje M es fundamental para las transformaciones de datos en Power BI a través del editor de consultas (Power Query). 

El nombre "M" está relacionado con la capacidad de mezclar datos desde diferentes fuentes. Power Query te permite conectarte a una amplia variedad de orígenes de datos, transformarlos y combinarlos en un solo modelo de datos. Esto es útil cuando necesitas integrar datos de bases de datos, archivos, servicios en la nube, etc.

Power Query utiliza el lenguaje M para definir las transformaciones que se realizan en los datos. Cada vez que aplicas una transformación (como filtrar, agrupar, o cambiar tipos de datos) desde la interfaz gráfica del editor de consultas, Power Query genera y ejecuta automáticamente el código M correspondiente.

Este código es lo que "hace el trabajo detrás de escena" y puedes verlo, modificarlo o escribirlo manualmente en la barra de fórmulas del editor de consultas.


El lenguaje M es eficaz porque está diseñado para procesar grandes volúmenes de datos y realizar transformaciones complejas de manera eficiente. M está optimizado para manejar datos en la memoria y realizar transformaciones paso a paso, lo que permite un procesamiento rápido y eficaz.

----------------------
1. LIBRERÍAS ESTÁNDAR
-----------------------
Funciones: M es un lenguaje funcional, lo que significa que las funciones son la base de su funcionamiento. Power Query viene con una librería estándar de funciones predefinidas que cubren una amplia gama de transformaciones y operaciones, como manipulación de texto, cálculo de fechas, operaciones matemáticas, y más.

Puedes ver todas las funciones disponibles en M ejecutando #shared en una consulta en blanco. Esto te mostrará todas las funciones, valores, y otros elementos disponibles en el entorno.

aplicar:

= #shared

convertir en tabla

luego

Ejemplo:

let
    Primer_Texto_Lenguaje_M = "Hola Mundo",
    texto_minusculas = Text.Lower(Primer_Texto_Lenguaje_M),
    texto_inicial = Text.Start(texto_minusculas,4)
in
    texto_inicial



-------------------------
2. EXPRESIONES Y VALORES
-------------------------

En M, las expresiones son bloques de código que se evalúan para producir valores. Los valores son el resultado de esas evaluaciones. M tiene varios tipos de valores, incluyendo:

Valores Literales Únicos: Son valores constantes que no cambian, como números, cadenas de texto, y booleanos.

let
    NumeroLiteral = 123,
    TextoLiteral = "Hola",
    BooleanoVerdadero = true,
    BooleanoFalso = false,
    ValorNulo = null
in
    TextoLiteral


Valores Intrínsecos Únicos: Son valores especiales predefinidos diseñados para trabajar con fechas y horas.

#time (horas, minutos, segundos)
#date (años, meses, días)
#datetime (años, meses, días, horas, minutos, segundos)
#datetimexone (años, meses, días, horas, minutos, segundos, desplazamiento de horas, desplazamiento de minutos)
#duration (días, horas, minutos, segundos)




#time (horas, minutos, segundos)
#date (años, meses, días)
#datetime (años, meses, días, horas, minutos, segundos)
#datetimexone (años, meses, días, horas, minutos, segundos, desplazamiento de horas, desplazamiento de minutos)
#duration (días, horas, minutos, segundos)

-----------------------------
3. VALORES ESTRUCTURADOS
-----------------------------

Los valores estructurados en M incluyen listas, registros, y tablas. Estos valores permiten organizar y manipular conjuntos de datos complejos.

a. Listas ---------------------------------
Las listas son colecciones ordenadas de valores que pueden ser de cualquier tipo.

Lista simple: Una colección ordenada de valores.
Lista de listas: Una lista que contiene otras listas.
Lista secuencial: Una lista generada secuencialmente, como un rango de números.


let
    ListaSimple = {1, 2, 3, 4, 5},
    ListaDeListas = {{1, 2}, {3, 4}, {5, 6}},
    ListaSecuencial = {1..10}
in
    ListaSecuencial

¿Extraer un valor de una lista?

let
    ListaSimple = {1, 2, 3, 4, 5}
in
    ListaSimple{1}


¿Para qué sirve lista de listas? 

Imagina que te conectas a una web, e importas sobretodo este tipo de datos, va a pasar que por 
cómo están los datos, en la tabla te traigas listas y dentro de estos más listas, entonces podría
pasar y serviría para poder separarlo, power query permite que haya con el fin de poder separarlo.

b. Registros ---------------------------------
Un registro es una colección de pares clave-valor, similar a un diccionario o un objeto JSON. Cada campo del registro tiene un nombre (clave) y un valor asociado.
Tablas
Operadores (aritméticos, comparación, concatenación, lógica)

let
    RegistroEjemplo = [Nombre = "Alice", Edad = 30, Ciudad = "Lima"]
in
    RegistroEjemplo

Este registro tiene tres campos: Nombre, Edad, y Ciudad.


c. Tablas ---------------------------------
Una tabla es una colección de registros organizados en filas y columnas. Las tablas son una estructura de datos central en M, especialmente en Power BI.

let
    TablaEjemplo = Table.FromRecords({
        [Nombre = "Alice", Edad = 30, Ciudad = "Lima"],
        [Nombre = "Bob", Edad = 25, Ciudad = "Cusco"],
        [Nombre = "Charlie", Edad = 35, Ciudad = "Arequipa"]
    })
in
    TablaEjemplo


---------------
4. Operadores
---------------

M soporta varios operadores para realizar operaciones aritméticas, comparaciones, concatenación, y operaciones lógicas.

a. Operadores Aritméticos ----------------------------
+ (Suma)
- (Resta)
* (Multiplicación)
/ (División)


let
    Suma = 3 + 5,
    Resta = 10 - 4,
    Multiplicacion = 6 * 7,
    Division = 20 / 4
in
    Suma



b. Operadores de Comparación ----------------------
= (Igual)
<> (Diferente)
> (Mayor que)
< (Menor que)
>= (Mayor o igual que)
<= (Menor o igual que)

let
    Igual = 5 = 5,
    Diferente = 5 <> 4,
    MayorQue = 10 > 7,
    MenorQue = 3 < 5
in
    MayorQue


c. Operadores de Concatenación --------------------
& (Concatenación de texto)

let
    ConcatenacionTexto = "Hola" & " " & "Mundo"
in
    ConcatenacionTexto


d. Operadores Lógicos ------------------------
and (Y lógico)
or (O lógico)
not (Negación lógica)

let
    AndLogico = true and false,
    OrLogico = true or false,
    NegacionLogica = not true
in
    OrLogico




Comentarios de Línea Única
Para agregar un comentario de línea única, usa el doble barra (//). Todo el texto después de // en la misma línea será tratado como un comentario.


let
    // Este es un comentario de línea única
    Valor = 42
in
    Valor


----------
Estos son los conceptos básicos del lenguaje M en Power Query, incluyendo librerías estándar, expresiones, valores, y operadores. Con estos fundamentos, ustedes pueden realizar diversas transformaciones de datos de manera eficiente en Power BI y otras herramientas que utilizan M. 




