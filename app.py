from flask import Flask, render_template

app = Flask(__name__)

# Ruta principal (/) que se ejecutar√° cuando se visite la URL ra√≠z
@app.route("/")
def index():
    """
    Lee el valor actual del contador desde count.txt,
    lo incrementa en uno, actualiza el archivo y env√≠a
    el valor a la plantilla index.html para mostrarlo.
    """
    # Abrir el archivo count.txt en modo lectura y obtener el n√∫mero
    with open("count.txt", "r") as f:
        count = int(f.read().strip() or 0)

    # Incrementar el contador en uno
    count += 1

    # Guardar el nuevo valor en count.txt
    with open("count.txt", "w") as f:
        f.write(str(count))

    # Renderizar la plantilla y pasar la variable count
    # üîπ "Renderizar" significa *procesar una plantilla HTML (index.html)*
    # y devolverla como una p√°gina completa al navegador.
    # Flask usa `render_template()` para combinar el HTML con variables de Python.
    # Por ejemplo:
    # - En tu plantilla index.html puedes tener algo como:
    #       <h1>Contador: {{ count }}</h1>
    #   Flask reemplaza {{ count }} por el valor que le pases desde Python.
    # üîπ Ejemplo r√°pido:
    # Si en tu c√≥digo haces: render_template("saludo.html", nombre="Emanuel")
    # y en tu HTML tienes:  <p>Hola {{ nombre }}</p>
    # ‚Üí el navegador mostrar√°: "Hola Emanuel"
    return render_template("index.html", count2=count)




#Es una condici√≥n especial que se usa para saber si el archivo se est√° ejecutando directamente
#  o si se est√° importando como m√≥dulo desde otro script.

# B√°sicamente le est√°s diciendo a Python:

# ‚ÄúOye, si este archivo se est√° ejecutando directamente (no importado), haz esto.‚Äù


if __name__ == "__main__":


    # Ejecutar la aplicaci√≥n Flask en modo debug para recargar autom√°ticamente.
    # üîπ `debug=True` hace dos cosas:
    #   1. Activa el "modo depuraci√≥n": si ocurre un error, Flask muestra un mensaje detallado
    #      en el navegador para ayudarte a encontrar la causa.
    #   2. Recarga autom√°tica: cada vez que editas tu c√≥digo, el servidor se reinicia solo.
    #
    # üî∏ Si NO pones `debug=True`:
    #   - Tendr√°s que reiniciar manualmente el servidor cada vez que cambies el c√≥digo.
    #   - Y si hay un error, Flask solo mostrar√° una p√°gina gen√©rica de error sin detalles t√©cnicos.
    app.run(debug=True)



# Flask usa el mismo comportamiento con los archivos est√°ticos.
# Por defecto busca una carpeta llamada static (para CSS, im√°genes, JS, etc.),
# a menos que t√∫ cambies el nombre y lo indiques as√≠:

# app = Flask(__name__, static_folder="archivos_estaticos")


# En Flask (que usa el motor de plantillas Jinja2), las llaves {{ variable }}
#  sirven para insertar valores de Python dentro del HTML.

# üß† ¬øQu√© es Jinja2?

# Jinja2 es el motor de plantillas (template engine) que usa Flask para generar p√°ginas HTML din√°micas.

# En cristiano: te permite combinar c√≥digo HTML con variables y l√≥gica de Python ‚Äî sin tener que escribir todo el HTML a mano cada vez que cambia algo.

# üß© ¬øQu√© hace exactamente?

# Cuando usas esto en tu c√≥digo Flask:

# return render_template("index.html", nombre="Emanuel", edad=28)


# Flask manda esas variables (nombre y edad) a Jinja2,
# y este reemplaza los valores dentro de tu plantilla HTML, por ejemplo:

# <p>Hola {{ nombre }}, tienes {{ edad }} a√±os.</p>


# ü°í Al procesarse, Jinja2 genera el HTML final as√≠:

# <p>Hola Emanuel, tienes 28 a√±os.</p>


# Y eso es lo que ve el navegador.

# üß† Jinja2 es una librer√≠a de Python

# Literalmente, Jinja2 es un m√≥dulo (paquete) escrito en Python que sirve para generar archivos de texto din√°micos,
# especialmente HTML.

# Es decir, no es parte del lenguaje Python por defecto: viene como una dependencia 
# instalada junto con Flask (cuando haces pip install flask, ya se instala Jinja2 tambi√©n).